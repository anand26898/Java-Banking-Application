import java.util.concurrent.*;
import java.util.concurrent.locks.*;

public class AccountWithConditionsUser {
	private static Account account = new Account();
	public static void main(String[] args) {
		System.out.println("Thread 1\t\tThread 2\t\tBalance");
		ExecutorService executor = Executors.newFixedThreadPool(2);
		
		
		while(!executor.isShutdown()) {
		}
	}
	public static class DepositTask implements Runnable{
		public void run() {
			try {
				while(true) {
					
				}
			}
			catch(InterruptedException ex) {
				ex.printStackTrace();
			}
		}
	}
	
	public static class WithdrawTask implements Runnable{
		public void run() {
			while(true) {
				account.withdraw((int)(Math.random() * 10) + 1);
			}
		}
	}
	
	private static class Account{
		
		private int balance = 0;
		public int getBalance() {
			return balance;
		}
		
		public void withdraw(int amount) {
			
		}
		
		public void deposit(int amount) {
			
		}
		
	}
}

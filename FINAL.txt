import java.util.concurrent.locks.*;
private static class Account{
		//creating and acquring a lock
		private static Lock lock = new ReentrantLock(true); //Fairness policy		
		private static Condition newDeposit = lock.newCondition(); //way of creating conditions is by calling them on lock objects //condition of pass this lock only when there is a possibility of withdrawing ie amount is there in account
		private int balance = 0;
		public int getBalance() {
			return balance;
		}
		
		public void withdraw(int amount) { //here we have to manipulate the locks(if there is amount in account)
		   lock.lock(); // acquring lock
		   try {
			   while(balance < amount) {   //amount that we want to remove
				   System.out.println("\t\t\tWait for deposit");
				   // we have notified the user but how we have to actually manipulate the condition
			       newDeposit.await(); //signalling new deposit condition that I need more money in this account and keep running until get enough money
			   }
			   balance -= amount; //if whike block is false
			   System.out.println("\t\t\tWithdraw"+ amount+ "\t\t" + getBalance());
		   }
		   //newDeposit.await can throw an exception if thread is already interrupted
		   caatch(InterruptedException ex){
			   ex.printStackTrace(); //if occurs then print StackTrace
		   }
		//now to release the lock
		   finally {
			   lock.unlock();   //now other program can use this lock and this bit of code
		   }
		}
		
		public void deposit(int amount) {
			lock.lock();
			try {
				balance += amount;
				System.out.println("Deposit "+ amount + "\t\t\t\t\t" + getBalance());
			 //finally signalling that deposit is done and you can call withdraw again
			    newDeposit.signalAll();  //yes this thread is done and other threads can access the information
			}
			finally {
				lock.unlock();
			}
		}
		
	}